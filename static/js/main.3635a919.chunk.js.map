{"version":3,"sources":["logo.svg","Home.js","App.js","index.js"],"names":["Home","props","state","logs","k8sValue","scfValue","localk8sKibanaLogs","localStorage","getItem","localscfKibanaLogs","handlek8sChange","bind","handlescfChange","submit","event","this","setState","target","value","Math","random","setItem","k8slogsArray","JSON","parse","responses","hits","scflogsArray","forEach","logsEntry","index","_source","log","msg","momentTime","moment","utc","sort","timeExact","local","format","logValue","match","exec","match2","sortingKey","momentValue","epoch","valueOf","doubtFull","component_name","kubernetes","container_name","logsArray","a","b","console","button","Object","keys","length","map","entry","Accordion","Card","Header","className","Collapse","eventKey","Body","InputGroup","Prepend","Text","FormControl","as","aria-label","onChange","Button","variant","onClick","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3635a919.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react';\nimport moment from 'moment';\nimport { Button, InputGroup, FormControl, Accordion, Card } from 'react-bootstrap';\nclass Home extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        logs: {},\n        k8sValue: '',\n        scfValue: '',\n      };\n      let localk8sKibanaLogs = localStorage.getItem('k8sLogs')\n      let localscfKibanaLogs = localStorage.getItem('scfLogs')\n      if (localk8sKibanaLogs) {\n        // localKibanaLogs = JSON.parse(localKibanaLogs)_\n        this.state.k8sValue = localk8sKibanaLogs;\n      }\n      if (localscfKibanaLogs) {\n        // localKibanaLogs = JSON.parse(localKibanaLogs)_\n        this.state.scfValue = localscfKibanaLogs;\n      }\n      this.handlek8sChange = this.handlek8sChange.bind(this);\n      this.handlescfChange = this.handlescfChange.bind(this);\n      this.submit = this.submit.bind(this);\n    }\n    \n    handlek8sChange(event) {\n        this.setState({k8sValue: event.target.value});\n    }\n\n    handlescfChange(event) {\n      this.setState({scfValue: event.target.value});\n    }\n\n    getRandomColor() {\n      let color = \"hsl(\" + Math.random() * 360 + \", 100%, 75%)\";\n      return color;\n    }\n\n    submit(event) {\n        localStorage.setItem('k8sLogs', this.state.k8sValue);\n        let k8slogsArray = [];\n        if (this.state.k8sValue) {\n          let k8sJsonScript = JSON.parse(this.state.k8sValue)\n          k8slogsArray = k8sJsonScript.responses[0].hits.hits\n        }\n        \n        localStorage.setItem('scfLogs', this.state.scfValue);\n        let scflogsArray = [];\n        if(this.state.scfValue) {\n          let scfJsonScript = JSON.parse(this.state.scfValue);\n          scflogsArray = scfJsonScript.responses[0].hits.hits\n        }\n                \n        scflogsArray.forEach((logsEntry, index) => {\n          logsEntry._source.log = logsEntry._source.msg;\n          let momentTime = moment.utc(logsEntry.sort[0], \"x\");\n          logsEntry._source.timeExact = momentTime.local().format('YYYY-MM-DD HH:mm:ss.SSS')\n          logsEntry.sort[1] = index;\n        });\n        k8slogsArray.forEach((logsEntry, index) => {\n          let logValue = logsEntry._source.log;\n          let myRegexp = /(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3,6})/;\n          let match = myRegexp.exec(logValue);\n          let myRegexp2 = /(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3,6})/;\n          let match2 = myRegexp2.exec(logValue);\n          if (match && match[1]) {\n            let sortingKey = match[1];\n            let momentValue = moment.utc(sortingKey, \"YYYY-MM-DD[T]h:mm:ss.SSSSSS\");\n            let epoch = momentValue.valueOf();\n            logsEntry._source.timeExact = momentValue.local().format('YYYY-MM-DD HH:mm:ss.SSS');\n            logsEntry.sort[0] = epoch;\n            logsEntry.sort[1] = sortingKey;\n          } else if (match2 && match2[1]) {\n            let sortingKey = match2[1];\n            let momentValue = moment.utc(sortingKey, \"YYYY-MM-DD h:mm:ss,SSS\");\n            let epoch = momentValue.valueOf();\n            logsEntry._source.timeExact = momentValue.local().format('YYYY-MM-DD HH:mm:ss.SSS');\n            logsEntry.sort[0] = epoch;\n            logsEntry.sort[1] = index;\n          } else {\n            let momentTime = moment.utc(logsEntry.sort[0], \"x\");\n            logsEntry.doubtFull=\"[Doubtfull]\";\n            logsEntry._source.timeExact = momentTime.local().format('YYYY-MM-DD HH:mm:ss.SSS')\n            logsEntry.sort[1] = index;\n          }\n          logsEntry._source.component_name = logsEntry._source.kubernetes.container_name;\n        });\n        let logsArray = [...k8slogsArray, ...scflogsArray];\n        logsArray.sort((a, b) => {\n            if (a.sort[0] < b.sort[0]){\n              return 1;\n            }\n            if (a.sort[0] > b.sort[0]) {\n              return -1;\n            }\n            if (a.sort[1] < b.sort[1]){\n              return 1;\n            }\n            if (a.sort[1] > b.sort[1]) {\n              return -1;\n            }\n            return 0;\n        })\n        \n        this.setState({logs: logsArray})\n        console.log(logsArray);\n    }\n    \n    render() {  \n        let button;\n        if (Object.keys(this.state.logs).length) {\n            button = this.state.logs.map((entry, index) =>\n                <Accordion key={index}>\n                <Card>\n                  <Card.Header>\n                    {entry.doubtFull}\n                    <span className=\"bubble red\">{entry._source.component_name}</span>&nbsp;\n                    <span className=\"bubble green\">{entry._source.timeExact}</span>&nbsp;\n                    <span className=\"bubble green\">{entry.sort[0]}</span> &nbsp;\n                    <span className=\"bubble blue\">{entry._source.log}</span> &nbsp;\n                  </Card.Header>\n                  <Accordion.Collapse eventKey={''+index}>\n                    <Card.Body>{entry._source.log}</Card.Body>\n                  </Accordion.Collapse>\n                </Card>\n              </Accordion>\n            )\n        } \n      return (\n        <div className=\"width-80\">\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                <InputGroup.Text>KIBANA(K8S) Logs Object</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl as=\"textarea\" aria-label=\"With textarea\" value={this.state.k8sValue} onChange={this.handlek8sChange}/>\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n                <InputGroup.Prepend>\n                <InputGroup.Text>KIBANA(SCF) Logs Object</InputGroup.Text>\n                </InputGroup.Prepend>\n                <FormControl as=\"textarea\" aria-label=\"With textarea\" value={this.state.scfValue} onChange={this.handlescfChange}/>\n            </InputGroup>\n            <Button variant=\"primary\" onClick={this.submit}>Submit</Button>\n            {button} \n        </div>\n      );\n    }\n  }\n  export default Home;","import logo from './logo.svg';\nimport './App.css';\nimport Home from './Home.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}